generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Blocked {
  id_user                            BigInt
  id_user_blocked                    BigInt
  User_Blocked_id_user_blockedToUser User   @relation("Blocked_id_user_blockedToUser", fields: [id_user_blocked], references: [id_user], onDelete: Cascade, map: "public_Blocked_id_user_blocked_fkey")
  User_Blocked_id_userToUser         User   @relation("Blocked_id_userToUser", fields: [id_user], references: [id_user], onDelete: Cascade, map: "public_Blocked_id_user_fkey")

  @@id([id_user, id_user_blocked])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Friend {
  id_user1                   BigInt @unique
  friend_state               Int    @db.SmallInt
  id_user2                   BigInt
  User_Friend_id_user1ToUser User   @relation("Friend_id_user1ToUser", fields: [id_user1], references: [id_user], onDelete: Cascade, map: "public_Friend_id_user1_fkey")
  User_Friend_id_user2ToUser User   @relation("Friend_id_user2ToUser", fields: [id_user2], references: [id_user], onDelete: Cascade, map: "public_Friend_id_user2_fkey")

  @@id([id_user1, id_user2])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Group {
  id_group        BigInt    @id @default(autoincrement())
  group_name      String    @default("") @db.VarChar
  group_picture   String    @default("") @db.VarChar
  id_user_creator BigInt
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  User            User      @relation(fields: [id_user_creator], references: [id_user], onDelete: Cascade, onUpdate: NoAction, map: "public_Group_id_user_creator_fkey")
  Message         Message[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Message {
  id_msg        BigInt   @id @default(autoincrement())
  id_user       BigInt
  id_group      BigInt
  msg_content   String   @default("") @db.VarChar
  id_parent_msg BigInt?
  send_at       DateTime @default(now()) @db.Timestamptz(6)
  Group         Group    @relation(fields: [id_group], references: [id_group], onDelete: Cascade, map: "public_Message_id_group_fkey")
  User          User     @relation(fields: [id_user], references: [id_user], onDelete: SetDefault, map: "public_Message_id_user_fkey")

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id_user                               BigInt    @id @default(autoincrement())
  pseudo                                String    @default("") @db.VarChar
  user_name                             String    @default("") @db.VarChar
  email                                 String    @default("") @db.VarChar
  pwd                                   String    @default("") @db.VarChar
  type_of_mfa                           String?   @db.VarChar
  user_state                            Int       @db.SmallInt
  created_at                            DateTime  @default(now()) @db.Timestamptz(6)
  Blocked_Blocked_id_user_blockedToUser Blocked[] @relation("Blocked_id_user_blockedToUser")
  Blocked_Blocked_id_userToUser         Blocked[] @relation("Blocked_id_userToUser")
  Friend_Friend_id_user1ToUser          Friend?   @relation("Friend_id_user1ToUser")
  Friend_Friend_id_user2ToUser          Friend[]  @relation("Friend_id_user2ToUser")
  Group                                 Group[]
  Message                               Message[]

  @@schema("public")
}
