
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  INSERT INTO public.users (id, user_profile_picture, user_pseudo) VALUES (
    NEW.id,
    new.raw_user_meta_data ->> 'avatar_url',
    new.raw_user_meta_data ->> 'user_name'
  );
  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."create_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."_prisma_migrations" (
    "id" character varying(36) NOT NULL,
    "checksum" character varying(64) NOT NULL,
    "finished_at" timestamp with time zone,
    "migration_name" character varying(255) NOT NULL,
    "logs" "text",
    "rolled_back_at" timestamp with time zone,
    "started_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "applied_steps_count" integer DEFAULT 0 NOT NULL
);

ALTER TABLE "public"."_prisma_migrations" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."group" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "group_name" "text" DEFAULT ''::"text" NOT NULL,
    "id_user_creator" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."group" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."message" (
    "id" bigint NOT NULL,
    "content" "text",
    "id_user" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "id_group" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "send_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."message" OWNER TO "postgres";

ALTER TABLE "public"."message" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."message_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_group" (
    "id" bigint NOT NULL,
    "id_user" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "id_group" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "last_check" timestamp without time zone DEFAULT "now"() NOT NULL,
    "state_invitation" smallint DEFAULT '0'::smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_group" OWNER TO "postgres";

ALTER TABLE "public"."user_group" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_group_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_relation" (
    "id_user" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "id_other_user" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "state_relation" integer,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_relation" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "user_pseudo" "text" DEFAULT ''::"text" NOT NULL,
    "user_profile_picture" "text" DEFAULT '"default.png"'::"text" NOT NULL,
    "user_state" smallint DEFAULT '0'::smallint NOT NULL,
    "user_created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."_prisma_migrations"
    ADD CONSTRAINT "_prisma_migrations_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."group"
    ADD CONSTRAINT "group_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "message_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_group"
    ADD CONSTRAINT "user_group_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_relation"
    ADD CONSTRAINT "user_relation_pkey" PRIMARY KEY ("id_user");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_User_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."group"
    ADD CONSTRAINT "public_group_id_user_creator_fkey" FOREIGN KEY ("id_user_creator") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "public_message_id_group_fkey" FOREIGN KEY ("id_group") REFERENCES "public"."group"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "public_message_id_user_fkey" FOREIGN KEY ("id_user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_group"
    ADD CONSTRAINT "public_user_group_id_group_fkey" FOREIGN KEY ("id_group") REFERENCES "public"."group"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_group"
    ADD CONSTRAINT "public_user_group_id_user_fkey" FOREIGN KEY ("id_user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_relation"
    ADD CONSTRAINT "public_user_relation_id_other_user_fkey" FOREIGN KEY ("id_other_user") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."user_relation"
    ADD CONSTRAINT "public_user_relation_id_user_fkey" FOREIGN KEY ("id_user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."message" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "id_user"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."message" FOR INSERT TO "authenticated" WITH CHECK ((("id_user" = "auth"."uid"()) AND ("created_at" = "now"())));

CREATE POLICY "Enable read access for user authenticated" ON "public"."message" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable update for users based id_user" ON "public"."message" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id_user")) WITH CHECK (("auth"."uid"() = "id_user"));

ALTER TABLE "public"."_prisma_migrations" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."group" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."message" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_group" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_relation" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;

RESET ALL;
